# Pull Request Check Workflow
# PR作成・更新時の品質チェック用ワークフロー

name: Pull Request Check

on:
  pull_request:
    branches: [develop, main]
    types: [opened, synchronize, reopened]

env:
  FLUTTER_VERSION: '3.35.0'
  JAVA_VERSION: '17'
  COVERAGE_THRESHOLD: 90

jobs:
  # ===============================
  # 変更ファイル分析
  # ===============================
  analyze-changes:
    name: 'Analyze Changes'
    runs-on: ubuntu-latest
    outputs:
      has-dart-changes: ${{ steps.changes.outputs.dart }}
      has-android-changes: ${{ steps.changes.outputs.android }}
      has-test-changes: ${{ steps.changes.outputs.test }}
      has-config-changes: ${{ steps.changes.outputs.config }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Detect changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          dart:
            - 'lib/**/*.dart'
            - 'pubspec.yaml'
          android:
            - 'android/**/*'
            - 'android/app/build.gradle'
          test:
            - 'test/**/*'
            - 'integration_test/**/*'
          config:
            - '.github/**/*'
            - 'analysis_options.yaml'
            - 'pubspec.yaml'

    - name: Comment PR with analysis
      uses: actions/github-script@v7
      with:
        script: |
          const changes = {
            dart: ${{ steps.changes.outputs.dart }},
            android: ${{ steps.changes.outputs.android }},
            test: ${{ steps.changes.outputs.test }},
            config: ${{ steps.changes.outputs.config }}
          };
          
          let comment = '## 🔍 変更分析結果\n\n';
          
          if (changes.dart) comment += '- ✅ Dartコードの変更を検出\n';
          if (changes.android) comment += '- ✅ Androidプラットフォーム固有の変更を検出\n';
          if (changes.test) comment += '- ✅ テストコードの変更を検出\n';
          if (changes.config) comment += '- ✅ 設定ファイルの変更を検出\n';
          
          comment += '\n📋 実行予定チェック:\n';
          comment += '- コード品質解析\n';
          comment += '- ユニット・ウィジェットテスト\n';
          if (changes.dart || changes.android) comment += '- APKビルドテスト\n';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # ===============================
  # コード品質チェック
  # ===============================
  code-quality:
    name: 'Code Quality Check'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Get dependencies
      run: flutter pub get

    - name: Run Dart analyzer
      run: |
        echo "## 📊 Dart Analyzer結果" >> $GITHUB_STEP_SUMMARY
        
        if flutter analyze --no-fatal-infos > analyzer_output.txt 2>&1; then
          echo "✅ **解析結果**: 問題なし" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **解析結果**: 問題が見つかりました" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat analyzer_output.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

    - name: Check code formatting
      run: |
        echo "## 🎨 コードフォーマット結果" >> $GITHUB_STEP_SUMMARY
        
        if dart format --output=none --set-exit-if-changed .; then
          echo "✅ **フォーマット**: 適切にフォーマットされています" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **フォーマット**: フォーマットの修正が必要です" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "修正コマンド: \`dart format .\`" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

    - name: Check import sorting
      run: |
        # import_sorterを使用してインポート順序をチェック
        flutter pub global activate import_sorter
        
        if flutter pub global run import_sorter:main --no-comments --exit-if-changed; then
          echo "✅ **インポート順序**: 適切に整理されています" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **インポート順序**: インポートの整理が必要です" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "修正コマンド: \`flutter pub global run import_sorter:main\`" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

  # ===============================
  # セキュリティスキャン
  # ===============================
  security-scan:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: analyze-changes
    if: needs.analyze-changes.outputs.has-dart-changes == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Semgrep security analysis
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/dart
        generate_config_file: semgrep.yml

    - name: Comment security results
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          let comment = '## 🔐 セキュリティスキャン結果\n\n';
          
          try {
            if (fs.existsSync('semgrep.sarif')) {
              const sarif = JSON.parse(fs.readFileSync('semgrep.sarif', 'utf8'));
              const results = sarif.runs[0]?.results || [];
              
              if (results.length === 0) {
                comment += '✅ **セキュリティ問題**: 検出されませんでした\n';
              } else {
                comment += `❌ **セキュリティ問題**: ${results.length}件の問題が検出されました\n\n`;
                
                results.slice(0, 5).forEach((result, index) => {
                  const ruleId = result.ruleId;
                  const message = result.message.text;
                  const location = result.locations[0]?.physicalLocation?.artifactLocation?.uri || 'Unknown';
                  
                  comment += `${index + 1}. **${ruleId}**\n`;
                  comment += `   - ファイル: ${location}\n`;
                  comment += `   - 詳細: ${message}\n\n`;
                });
                
                if (results.length > 5) {
                  comment += `... および ${results.length - 5} 件の追加問題\n`;
                }
              }
            } else {
              comment += '✅ **セキュリティスキャン**: 正常に完了しました\n';
            }
          } catch (error) {
            comment += '⚠️ **セキュリティスキャン**: 結果の解析に失敗しました\n';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # ===============================
  # テスト実行・カバレッジチェック
  # ===============================
  test:
    name: 'Test & Coverage'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Get dependencies
      run: flutter pub get

    - name: Run tests with coverage
      run: |
        flutter test \
          --coverage \
          --test-randomize-ordering-seed=random \
          --reporter=expanded \
          --file-reporter=json:test-results.json

    - name: Process coverage results
      run: |
        sudo apt-get update
        sudo apt-get install -y lcov
        
        # HTML coverage report生成
        genhtml coverage/lcov.info -o coverage/html
        
        # カバレッジパーセンテージ計算
        COVERAGE=$(lcov --summary coverage/lcov.info 2>&1 | grep "lines......:" | cut -d':' -f2 | tr -d ' %')
        echo "COVERAGE_PERCENTAGE=$COVERAGE" >> $GITHUB_ENV
        
        # GitHub Step Summaryに結果を出力
        echo "## 📊 テストカバレッジ結果" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**カバレッジ:** $COVERAGE%" >> $GITHUB_STEP_SUMMARY
        echo "**閾値:** $COVERAGE_THRESHOLD%" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if (( $(echo "$COVERAGE < $COVERAGE_THRESHOLD" | bc -l) )); then
          echo "❌ **判定:** 閾値を下回っています" >> $GITHUB_STEP_SUMMARY
          echo "STATUS=failed" >> $GITHUB_ENV
        else
          echo "✅ **判定:** 閾値を満たしています" >> $GITHUB_STEP_SUMMARY
          echo "STATUS=passed" >> $GITHUB_ENV
        fi

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: pr-check
        name: pr-coverage

    - name: Comment test results
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const coverage = process.env.COVERAGE_PERCENTAGE;
          const threshold = process.env.COVERAGE_THRESHOLD;
          const status = process.env.STATUS;
          
          let comment = '## 🧪 テスト実行結果\n\n';
          
          // テスト結果の読み込み
          try {
            if (fs.existsSync('test-results.json')) {
              const testResults = JSON.parse(fs.readFileSync('test-results.json', 'utf8'));
              const successCount = testResults.success || 0;
              const failureCount = testResults.failure || 0;
              const totalTests = successCount + failureCount;
              
              comment += `**実行テスト数:** ${totalTests}\n`;
              comment += `**成功:** ${successCount} ✅\n`;
              comment += `**失敗:** ${failureCount} ${failureCount > 0 ? '❌' : '✅'}\n\n`;
            }
          } catch (error) {
            comment += '**テスト結果:** 結果ファイルの読み込みに失敗\n\n';
          }
          
          // カバレッジ結果
          comment += `**カバレッジ:** ${coverage}% ${status === 'passed' ? '✅' : '❌'}\n`;
          comment += `**必要カバレッジ:** ${threshold}%\n\n`;
          
          if (status === 'failed') {
            comment += '⚠️ **カバレッジが不足しています。テストを追加してください。**\n';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Fail if coverage is insufficient
      if: env.STATUS == 'failed'
      run: |
        echo "❌ Coverage $COVERAGE_PERCENTAGE% is below threshold $COVERAGE_THRESHOLD%"
        exit 1

  # ===============================
  # ビルドテスト（変更がある場合のみ）
  # ===============================
  build-test:
    name: 'Build Test'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [analyze-changes, code-quality, test]
    if: needs.analyze-changes.outputs.has-dart-changes == 'true' || needs.analyze-changes.outputs.has-android-changes == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Get dependencies
      run: flutter pub get

    - name: Build Android APK (Debug)
      run: |
        flutter build apk --debug \
          --build-number=${{ github.event.number }} \
          --build-name="pr-${{ github.event.number }}" \
          --dart-define=ENVIRONMENT=development

    - name: Check APK size
      run: |
        APK_PATH="build/app/outputs/flutter-apk/app-debug.apk"
        APK_SIZE=$(stat -c%s "$APK_PATH")
        APK_SIZE_MB=$(echo "scale=2; $APK_SIZE / 1024 / 1024" | bc)
        
        echo "APK_SIZE_MB=$APK_SIZE_MB" >> $GITHUB_ENV
        
        echo "## 📱 ビルド結果" >> $GITHUB_STEP_SUMMARY
        echo "**APKサイズ:** ${APK_SIZE_MB} MB" >> $GITHUB_STEP_SUMMARY
        
        # サイズが100MBを超えた場合は警告
        if (( $(echo "$APK_SIZE_MB > 100" | bc -l) )); then
          echo "⚠️ **警告:** APKサイズが大きすぎます" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ **APKサイズ:** 適切な範囲内" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Comment build results
      uses: actions/github-script@v7
      with:
        script: |
          const apkSize = process.env.APK_SIZE_MB;
          
          let comment = '## 📱 ビルドテスト結果\n\n';
          comment += `**ビルド:** ✅ 成功\n`;
          comment += `**APKサイズ:** ${apkSize} MB\n`;
          
          if (parseFloat(apkSize) > 100) {
            comment += '\n⚠️ **警告:** APKサイズが大きすぎます。リソースやライブラリの最適化を検討してください。\n';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # ===============================
  # 最終結果サマリー
  # ===============================
  summary:
    name: 'PR Check Summary'
    runs-on: ubuntu-latest
    needs: [analyze-changes, code-quality, security-scan, test, build-test]
    if: always()

    steps:
    - name: Generate final summary
      uses: actions/github-script@v7
      with:
        script: |
          const results = {
            'code-quality': '${{ needs.code-quality.result }}',
            'security-scan': '${{ needs.security-scan.result }}',
            'test': '${{ needs.test.result }}',
            'build-test': '${{ needs.build-test.result }}'
          };
          
          let comment = '## 📋 PR チェック完了サマリー\n\n';
          
          Object.entries(results).forEach(([job, result]) => {
            const emoji = result === 'success' ? '✅' : 
                         result === 'failure' ? '❌' : 
                         result === 'skipped' ? '⏭️' : '⚠️';
            
            const jobName = {
              'code-quality': 'コード品質チェック',
              'security-scan': 'セキュリティスキャン',
              'test': 'テスト実行',
              'build-test': 'ビルドテスト'
            }[job];
            
            comment += `- ${emoji} **${jobName}**: ${result}\n`;
          });
          
          const allPassed = Object.values(results).every(result => 
            result === 'success' || result === 'skipped'
          );
          
          comment += '\n---\n';
          
          if (allPassed) {
            comment += '🎉 **総合判定:** ✅ 全てのチェックが完了しました！\n';
            comment += '\n✨ このPRはマージ可能です。';
          } else {
            comment += '⚠️ **総合判定:** ❌ 修正が必要な項目があります。\n';
            comment += '\n🔧 上記の失敗項目を修正してから再度プッシュしてください。';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Set PR status
      uses: actions/github-script@v7
      with:
        script: |
          const results = {
            'code-quality': '${{ needs.code-quality.result }}',
            'security-scan': '${{ needs.security-scan.result }}',
            'test': '${{ needs.test.result }}',
            'build-test': '${{ needs.build-test.result }}'
          };
          
          const allPassed = Object.values(results).every(result => 
            result === 'success' || result === 'skipped'
          );
          
          if (!allPassed) {
            core.setFailed('One or more PR checks failed');
          }