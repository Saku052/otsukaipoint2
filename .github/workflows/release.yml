# Release Management Workflow
# リリース・ホットフィックス管理用ワークフロー

name: Release Management

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*.*.*'
      - 'hotfix-*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - hotfix
      release_notes:
        description: 'Release notes'
        required: false
        type: string

env:
  FLUTTER_VERSION: '3.35.0'
  JAVA_VERSION: '17'

jobs:
  # ===============================
  # リリースバージョン決定
  # ===============================
  prepare-release:
    name: 'Prepare Release'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is-hotfix: ${{ steps.version.outputs.is-hotfix }}
      release-notes: ${{ steps.notes.outputs.notes }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          # 手動実行の場合
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          
          # 最新タグを取得
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          
          # バージョン番号を抽出
          VERSION=$(echo $LATEST_TAG | sed 's/v//')
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
          
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case $RELEASE_TYPE in
            major)
              NEW_VERSION="$((MAJOR+1)).0.0"
              ;;
            minor)
              NEW_VERSION="$MAJOR.$((MINOR+1)).0"
              ;;
            patch)
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH+1))"
              ;;
            hotfix)
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH+1))"
              echo "is-hotfix=true" >> $GITHUB_OUTPUT
              ;;
          esac
          
          NEW_TAG="v$NEW_VERSION"
          
        elif [[ "${{ github.event_name }}" == "push" ]]; then
          # タグプッシュの場合
          NEW_TAG="${{ github.ref_name }}"
          NEW_VERSION=$(echo $NEW_TAG | sed 's/v//')
          
          if [[ $NEW_TAG == hotfix-* ]]; then
            echo "is-hotfix=true" >> $GITHUB_OUTPUT
          fi
          
        elif [[ "${{ github.event_name }}" == "release" ]]; then
          # GitHub Release作成の場合
          NEW_TAG="${{ github.event.release.tag_name }}"
          NEW_VERSION=$(echo $NEW_TAG | sed 's/v//')
        fi
        
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT
        
        echo "📋 決定されたバージョン: $NEW_VERSION"
        echo "📋 決定されたタグ: $NEW_TAG"

    - name: Prepare release notes
      id: notes
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          NOTES="${{ github.event.inputs.release_notes }}"
          if [[ -z "$NOTES" ]]; then
            NOTES="Release ${{ steps.version.outputs.version }}"
          fi
        elif [[ "${{ github.event_name }}" == "release" ]]; then
          NOTES="${{ github.event.release.body }}"
        else
          # コミット履歴から自動生成
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [[ -n "$PREVIOUS_TAG" ]]; then
            NOTES=$(git log --oneline $PREVIOUS_TAG..HEAD --pretty=format:"- %s" | head -20)
          else
            NOTES="Initial release"
          fi
        fi
        
        # マルチライン対応
        {
          echo "notes<<EOF"
          echo "$NOTES"
          echo "EOF"
        } >> $GITHUB_OUTPUT

  # ===============================
  # リリースビルド
  # ===============================
  build-release:
    name: 'Build Release'
    runs-on: ubuntu-latest
    needs: prepare-release
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Get dependencies
      run: flutter pub get

    - name: Update version in pubspec.yaml
      run: |
        VERSION="${{ needs.prepare-release.outputs.version }}"
        BUILD_NUMBER="${{ github.run_number }}"
        
        # pubspec.yamlのバージョンを更新
        sed -i "s/^version: .*/version: $VERSION+$BUILD_NUMBER/" pubspec.yaml
        
        echo "📱 Updated version to: $VERSION+$BUILD_NUMBER"

    - name: Build production APK
      run: |
        echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/keystore.jks
        
        flutter build apk --release \
          --build-number=${{ github.run_number }} \
          --build-name="${{ needs.prepare-release.outputs.version }}" \
          --dart-define=ENVIRONMENT=production \
          --obfuscate \
          --split-debug-info=build/app/outputs/symbols

    - name: Build App Bundle (AAB)
      run: |
        flutter build appbundle --release \
          --build-number=${{ github.run_number }} \
          --build-name="${{ needs.prepare-release.outputs.version }}" \
          --dart-define=ENVIRONMENT=production \
          --obfuscate \
          --split-debug-info=build/app/outputs/symbols

    - name: Generate checksums
      run: |
        cd build/app/outputs/flutter-apk/
        sha256sum *.apk > checksums.txt
        
        cd ../bundle/release/
        sha256sum *.aab >> ../../flutter-apk/checksums.txt
        
        echo "## 📦 Build Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### APK Files" >> $GITHUB_STEP_SUMMARY
        ls -la build/app/outputs/flutter-apk/*.apk | while read line; do
          echo "- $(echo $line | awk '{print $9}') ($(echo $line | awk '{print $5}') bytes)" >> $GITHUB_STEP_SUMMARY
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### App Bundle Files" >> $GITHUB_STEP_SUMMARY
        ls -la build/app/outputs/bundle/release/*.aab | while read line; do
          echo "- $(echo $line | awk '{print $9}') ($(echo $line | awk '{print $5}') bytes)" >> $GITHUB_STEP_SUMMARY
        done

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: |
          build/app/outputs/flutter-apk/*.apk
          build/app/outputs/bundle/release/*.aab
          build/app/outputs/flutter-apk/checksums.txt
          build/app/outputs/symbols/
        retention-days: 90

  # ===============================
  # リリーステスト
  # ===============================
  release-test:
    name: 'Release Test'
    runs-on: ubuntu-latest
    needs: [prepare-release, build-release]
    timeout-minutes: 45

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Download release artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-artifacts
        path: ./release-artifacts/

    - name: Get dependencies
      run: flutter pub get

    - name: Run comprehensive tests
      run: |
        echo "## 🧪 リリーステスト結果" >> $GITHUB_STEP_SUMMARY
        
        # ユニットテスト
        flutter test --coverage --reporter=expanded
        
        # テストカバレッジ確認
        sudo apt-get update && sudo apt-get install -y lcov
        COVERAGE=$(lcov --summary coverage/lcov.info 2>&1 | grep "lines......:" | cut -d':' -f2 | tr -d ' %')
        
        echo "**カバレッジ:** $COVERAGE%" >> $GITHUB_STEP_SUMMARY
        
        if (( $(echo "$COVERAGE < 90" | bc -l) )); then
          echo "❌ **カバレッジ不足:** リリースには90%以上必要" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
        
        echo "✅ **カバレッジ:** 要件を満たしています" >> $GITHUB_STEP_SUMMARY

    - name: APK integrity check
      run: |
        # APKの整合性チェック
        cd release-artifacts
        
        if sha256sum -c checksums.txt; then
          echo "✅ **APK整合性:** 問題なし" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **APK整合性:** チェックサム不一致" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

    - name: Security scan on release build
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/owasp-top-ten
          p/secrets
      continue-on-error: false

  # ===============================
  # GitHub Release作成
  # ===============================
  create-github-release:
    name: 'Create GitHub Release'
    runs-on: ubuntu-latest
    needs: [prepare-release, build-release, release-test]
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download release artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-artifacts
        path: ./release-artifacts/

    - name: Create Git tag
      if: github.event_name == 'workflow_dispatch'
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git tag -a "${{ needs.prepare-release.outputs.tag }}" -m "Release ${{ needs.prepare-release.outputs.version }}"
        git push origin "${{ needs.prepare-release.outputs.tag }}"

    - name: Create GitHub Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.prepare-release.outputs.tag }}
        release_name: おつかいポイント ${{ needs.prepare-release.outputs.tag }}
        body: |
          ## 🚀 リリース ${{ needs.prepare-release.outputs.version }}
          
          ### 📱 アプリ情報
          - **バージョン:** ${{ needs.prepare-release.outputs.version }}
          - **ビルド番号:** ${{ github.run_number }}
          - **プラットフォーム:** Android
          - **最小サポート:** Android 8.0 (API 26)
          
          ### 🔧 技術情報
          - **Flutter:** ${{ env.FLUTTER_VERSION }}
          - **コミット:** ${{ github.sha }}
          - **ビルド時刻:** ${{ github.event.head_commit.timestamp }}
          
          ### 📋 変更内容
          ${{ needs.prepare-release.outputs.release-notes }}
          
          ### 📦 ダウンロード
          - **APK (推奨):** app-release.apk
          - **App Bundle:** app-release.aab
          - **Checksums:** checksums.txt
          
          ### ⚠️ インストール注意事項
          1. 不明な提供元からのアプリインストールを許可してください
          2. Google Play Protect警告は「インストール」を選択してください
          3. 初回起動時はGoogle OAuth認証が必要です
        draft: ${{ needs.prepare-release.outputs.is-hotfix == 'true' }}
        prerelease: ${{ needs.prepare-release.outputs.is-hotfix == 'true' }}

    - name: Upload APK to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-artifacts/app-release.apk
        asset_name: おつかいポイント-${{ needs.prepare-release.outputs.version }}.apk
        asset_content_type: application/vnd.android.package-archive

    - name: Upload App Bundle to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-artifacts/app-release.aab
        asset_name: おつかいポイント-${{ needs.prepare-release.outputs.version }}.aab
        asset_content_type: application/octet-stream

    - name: Upload checksums to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-artifacts/checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain

  # ===============================
  # Google Play Store デプロイ
  # ===============================
  deploy-playstore:
    name: 'Deploy to Play Store'
    runs-on: ubuntu-latest
    needs: [prepare-release, build-release, release-test]
    if: needs.prepare-release.outputs.is-hotfix != 'true'

    environment:
      name: production
      url: https://play.google.com/console

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download release artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-artifacts
        path: ./release-artifacts/

    - name: Deploy to Google Play Console
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
        packageName: com.otsukaipoint.app
        releaseFiles: release-artifacts/app-release.aab
        track: production
        status: completed
        inAppUpdatePriority: 3
        whatsNewDirectory: release-notes/
        mappingFile: release-artifacts/symbols/app.android-arm64.symbols

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: 'success'
        channel: '#otsukaipoint-prod'
        text: |
          🎉 Google Play Storeデプロイ完了！
          
          **バージョン:** ${{ needs.prepare-release.outputs.version }}
          **ビルド:** ${{ github.run_number }}
          **ステータス:** 本番環境公開済み
          
          📱 Google Play Storeで確認可能
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ===============================
  # ホットフィックスデプロイ
  # ===============================
  deploy-hotfix:
    name: 'Deploy Hotfix'
    runs-on: ubuntu-latest
    needs: [prepare-release, build-release, release-test]
    if: needs.prepare-release.outputs.is-hotfix == 'true'

    environment:
      name: hotfix
      url: https://play.google.com/console

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download release artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-artifacts
        path: ./release-artifacts/

    - name: Deploy hotfix to internal testing
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
        packageName: com.otsukaipoint.app
        releaseFiles: release-artifacts/app-release.aab
        track: internal
        status: draft
        inAppUpdatePriority: 5
        whatsNewDirectory: release-notes/

    - name: Notify hotfix deployment
      uses: 8398a7/action-slack@v3
      with:
        status: 'warning'
        channel: '#otsukaipoint-alerts'
        text: |
          🚨 ホットフィックス配信準備完了
          
          **バージョン:** ${{ needs.prepare-release.outputs.version }}
          **種別:** 緊急修正
          **ステータス:** 内部テスト版として配信準備完了
          
          ⚠️ 検証後に手動で本番公開してください
          📋 Google Play Console: https://play.google.com/console
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ===============================
  # リリース完了通知
  # ===============================
  notify-completion:
    name: 'Notify Release Completion'
    runs-on: ubuntu-latest
    needs: [prepare-release, create-github-release, deploy-playstore]
    if: always() && needs.create-github-release.result == 'success'

    steps:
    - name: Send completion notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#otsukaipoint-releases'
        text: |
          🎊 リリース処理完了！
          
          **バージョン:** ${{ needs.prepare-release.outputs.version }}
          **GitHub Release:** ✅ 作成済み
          **Google Play Store:** ${{ needs.deploy-playstore.result == 'success' && '✅ 公開済み' || '⏳ 処理中' }}
          
          🔗 **リンク:**
          - [GitHub Release](https://github.com/soraharada/otsukaipoint2/releases/tag/${{ needs.prepare-release.outputs.tag }})
          - [Google Play Console](https://play.google.com/console)
          
          👏 お疲れ様でした！
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}