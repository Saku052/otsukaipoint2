# CI/CD Pipeline for „Åä„Å§„Åã„ÅÑ„Éù„Ç§„É≥„Éà MVP
# Flutter Android „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥Áî®„É°„Ç§„É≥„ÉØ„Éº„ÇØ„Éï„É≠„Éº

name: CI/CD Pipeline

on:
  push:
    branches: [develop, staging, main]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [develop, main]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'

env:
  FLUTTER_VERSION: '3.35.0'
  JAVA_VERSION: '17'
  ANDROID_API_LEVEL: 34
  ANDROID_BUILD_TOOLS_VERSION: '34.0.0'
  COVERAGE_THRESHOLD: 90

jobs:
  # ===============================
  # „Ç≥„Éº„ÉâÂìÅË≥™„Éª„Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØ
  # ===============================
  code-quality:
    name: 'Code Quality & Security Analysis'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Get dependencies
      run: flutter pub get

    - name: Verify dependencies
      run: flutter pub deps

    - name: Run Dart analyzer
      run: dart analyze --fatal-infos

    - name: Check code formatting
      run: dart format --output=none --set-exit-if-changed .

    - name: Run security analysis with Semgrep
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_TOKEN }}

    - name: Upload security scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif

  # ===============================
  # „É¶„Éã„ÉÉ„Éà„ÉÜ„Çπ„Éà„Éª„Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà„ÉÜ„Çπ„Éà
  # ===============================
  test:
    name: 'Unit & Widget Tests'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: code-quality

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Get dependencies
      run: flutter pub get

    - name: Run unit and widget tests
      run: |
        flutter test \
          --coverage \
          --test-randomize-ordering-seed=random \
          --reporter=expanded \
          --file-reporter=json:test-results.json

    - name: Generate coverage report
      run: |
        # Install lcov for coverage processing
        sudo apt-get update
        sudo apt-get install -y lcov
        
        # Generate HTML coverage report
        genhtml coverage/lcov.info -o coverage/html
        
        # Calculate coverage percentage
        COVERAGE=$(lcov --summary coverage/lcov.info 2>&1 | grep "lines......:" | cut -d':' -f2 | tr -d ' %')
        echo "COVERAGE_PERCENTAGE=$COVERAGE" >> $GITHUB_ENV
        echo "Coverage: $COVERAGE%"

    - name: Check coverage threshold
      run: |
        if (( $(echo "$COVERAGE_PERCENTAGE < $COVERAGE_THRESHOLD" | bc -l) )); then
          echo "‚ùå Coverage $COVERAGE_PERCENTAGE% is below threshold $COVERAGE_THRESHOLD%"
          exit 1
        fi
        echo "‚úÖ Coverage $COVERAGE_PERCENTAGE% meets threshold $COVERAGE_THRESHOLD%"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: flutter
        name: flutter-tests
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          test-results.json
          coverage/
        retention-days: 7

  # ===============================
  # Android „Éì„É´„Éâ„ÉªÁµ±Âêà„ÉÜ„Çπ„Éà
  # ===============================
  build-android:
    name: 'Build Android APK'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [code-quality, test]

    strategy:
      matrix:
        environment: [development, staging, production]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: ${{ env.ANDROID_API_LEVEL }}
        build-tools: ${{ env.ANDROID_BUILD_TOOLS_VERSION }}

    - name: Get dependencies
      run: flutter pub get

    - name: Configure environment
      run: |
        # Áí∞Â¢ÉÂà•Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅÆÈÅ©Áî®
        case "${{ matrix.environment }}" in
          "development")
            cp config/development.env .env
            echo "BUILD_MODE=debug" >> $GITHUB_ENV
            ;;
          "staging")
            cp config/staging.env .env
            echo "BUILD_MODE=profile" >> $GITHUB_ENV
            ;;
          "production")
            cp config/production.env .env
            echo "BUILD_MODE=release" >> $GITHUB_ENV
            ;;
        esac

    - name: Build Android APK
      run: |
        if [ "${{ matrix.environment }}" == "production" ]; then
          # Êú¨Áï™Áí∞Â¢É„ÅØÁΩ≤Âêç‰ªò„ÅçAPK‰ΩúÊàê
          flutter build apk --release \
            --build-number=${{ github.run_number }} \
            --build-name="1.0.${{ github.run_number }}" \
            --dart-define=ENVIRONMENT=production
        else
          # ÈñãÁô∫„Éª„Çπ„ÉÜ„Éº„Ç∏„É≥„Ç∞Áí∞Â¢É
          flutter build apk --$BUILD_MODE \
            --build-number=${{ github.run_number }} \
            --build-name="1.0.${{ github.run_number }}-${{ matrix.environment }}" \
            --dart-define=ENVIRONMENT=${{ matrix.environment }}
        fi

    - name: Sign Android APK (Production only)
      if: matrix.environment == 'production'
      run: |
        echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/keystore.jks
        flutter build apk --release \
          --build-number=${{ github.run_number }} \
          --build-name="1.0.${{ github.run_number }}" \
          --dart-define=ENVIRONMENT=production

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: apk-${{ matrix.environment }}
        path: build/app/outputs/flutter-apk/*.apk
        retention-days: 14

    - name: Generate APK info
      run: |
        APK_PATH=$(find build/app/outputs/flutter-apk -name "*.apk" | head -1)
        APK_SIZE=$(stat -f%z "$APK_PATH" 2>/dev/null || stat -c%s "$APK_PATH")
        APK_SIZE_MB=$(echo "scale=2; $APK_SIZE / 1024 / 1024" | bc)
        
        echo "## üì± APK Build Info (${{ matrix.environment }})" >> $GITHUB_STEP_SUMMARY
        echo "- **File:** $(basename $APK_PATH)" >> $GITHUB_STEP_SUMMARY
        echo "- **Size:** ${APK_SIZE_MB} MB" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** ${{ matrix.environment }}" >> $GITHUB_STEP_SUMMARY

  # ===============================
  # Áµ±Âêà„ÉÜ„Çπ„ÉàÔºàAndroidÂÆüÊ©ü„ÉÜ„Çπ„ÉàÔºâ
  # ===============================
  integration-test:
    name: 'Integration Tests'
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: build-android
    if: github.event_name == 'push' && (github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Enable KVM group perms
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: ${{ env.ANDROID_API_LEVEL }}
        build-tools: ${{ env.ANDROID_BUILD_TOOLS_VERSION }}

    - name: Get dependencies
      run: flutter pub get

    - name: Run integration tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ env.ANDROID_API_LEVEL }}
        target: google_apis
        arch: x86_64
        profile: Nexus 6
        cores: 2
        ram-size: 4096M
        heap-size: 1024M
        script: |
          flutter drive \
            --driver=test_driver/integration_test.dart \
            --target=integration_test/app_test.dart \
            --device-id=emulator-5554 \
            --no-headless

    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          integration_test/screenshots/
          integration_test/logs/
        retention-days: 7

  # ===============================
  # ÈñãÁô∫Áí∞Â¢É„Éá„Éó„É≠„Ç§ÔºàFirebase App DistributionÔºâ
  # ===============================
  deploy-development:
    name: 'Deploy to Development'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build-android]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download development APK
      uses: actions/download-artifact@v4
      with:
        name: apk-development
        path: ./artifacts/

    - name: Deploy to Firebase App Distribution
      uses: wzieba/Firebase-Distribution-Github-Action@v1
      with:
        appId: ${{ secrets.FIREBASE_APP_ID_ANDROID }}
        serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        groups: developers,qa-team
        file: artifacts/app-debug.apk
        releaseNotes: |
          üöÄ Development Build
          
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Build:** #${{ github.run_number }}
          
          **Changes:**
          ${{ github.event.head_commit.message }}

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#otsukaipoint-dev'
        text: |
          üöÄ DevelopmentÁâà„Éá„Éó„É≠„Ç§ÂÆå‰∫Ü
          „Éì„É´„ÉâÁï™Âè∑: ${{ github.run_number }}
          „ÉÄ„Ç¶„É≥„É≠„Éº„Éâ: Firebase App Distribution
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ===============================
  # „Çπ„ÉÜ„Éº„Ç∏„É≥„Ç∞„Éá„Éó„É≠„Ç§
  # ===============================
  deploy-staging:
    name: 'Deploy to Staging'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build-android, integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download staging APK
      uses: actions/download-artifact@v4
      with:
        name: apk-staging
        path: ./artifacts/

    - name: Deploy to Internal Testing Track
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
        packageName: com.otsukaipoint.app
        releaseFiles: artifacts/*.apk
        track: internal
        status: draft
        inAppUpdatePriority: 2
        whatsNewDirectory: release-notes/

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#otsukaipoint-staging'
        text: |
          üéØ „Çπ„ÉÜ„Éº„Ç∏„É≥„Ç∞Áâà„Éá„Éó„É≠„Ç§ÂÆå‰∫Ü
          „Éì„É´„ÉâÁï™Âè∑: ${{ github.run_number }}
          Google Play ConsoleÂÜÖÈÉ®„ÉÜ„Çπ„Éà„ÅßÁ¢∫Ë™çÂèØËÉΩ
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ===============================
  # Êú¨Áï™„Éá„Éó„É≠„Ç§
  # ===============================
  deploy-production:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build-android, integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    environment:
      name: production
      url: https://play.google.com/store/apps/details?id=com.otsukaipoint.app

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download production APK
      uses: actions/download-artifact@v4
      with:
        name: apk-production
        path: ./artifacts/

    - name: Deploy to Production Track
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
        packageName: com.otsukaipoint.app
        releaseFiles: artifacts/*.apk
        track: production
        status: draft
        inAppUpdatePriority: 3
        whatsNewDirectory: release-notes/

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.${{ github.run_number }}
        release_name: „Åä„Å§„Åã„ÅÑ„Éù„Ç§„É≥„Éà v1.0.${{ github.run_number }}
        body: |
          ## üöÄ Êú¨Áï™„É™„É™„Éº„Çπ v1.0.${{ github.run_number }}
          
          ### üì± „Ç¢„Éó„É™ÊÉÖÂ†±
          - **„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†:** Android
          - **ÊúÄÂ∞è„Çµ„Éù„Éº„Éà:** Android 8.0 (API 26)
          - **„Éì„É´„ÉâÁï™Âè∑:** ${{ github.run_number }}
          
          ### üîß ÊäÄË°ìË©≥Á¥∞
          - **Flutter:** ${{ env.FLUTTER_VERSION }}
          - **„Ç≥„Éü„ÉÉ„Éà:** ${{ github.sha }}
          - **„Éì„É´„ÉâÊôÇÂàª:** ${{ github.event.head_commit.timestamp }}
          
          ### üìã Â§âÊõ¥ÂÜÖÂÆπ
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#otsukaipoint-prod'
        text: |
          üéâ Êú¨Áï™„Éá„Éó„É≠„Ç§ÂÆå‰∫ÜÔºÅ
          „Éê„Éº„Ç∏„Éß„É≥: v1.0.${{ github.run_number }}
          Google Play Console„ÅßÁ¢∫Ë™ç„ÉªÂÖ¨ÈñãÂèØËÉΩ
          
          üîó GitHub Release: https://github.com/soraharada/otsukaipoint2/releases/tag/v1.0.${{ github.run_number }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ===============================
  # „Éá„Éó„É≠„Ç§Â§±ÊïóÊôÇ„ÅÆ„É≠„Éº„É´„Éê„ÉÉ„ÇØ
  # ===============================
  rollback:
    name: 'Emergency Rollback'
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    needs: [deploy-staging, deploy-production]

    steps:
    - name: Notify emergency
      uses: 8398a7/action-slack@v3
      with:
        status: 'failure'
        channel: '#otsukaipoint-alerts'
        text: |
          üö® Á∑äÊÄ•: „Éá„Éó„É≠„Ç§Â§±Êïó
          
          ÊâãÂãïÂØæÂøú„ÅåÂøÖË¶Å„Åß„ÅôÔºö
          1. Google Play Console„Åß„É≠„Éº„É´„Éê„ÉÉ„ÇØÂÆüË°å
          2. ÂΩ±ÈüøË™øÊüª„ÉªÂéüÂõ†ÁâπÂÆö
          3. ‰øÆÊ≠£Áâà„ÅÆÊ∫ñÂÇô
          
          „Éì„É´„Éâ: ${{ github.run_number }}
          „Ç≥„Éü„ÉÉ„Éà: ${{ github.sha }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}